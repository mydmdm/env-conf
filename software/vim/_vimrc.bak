""""""""""""""""""""""""""""""""""""""""""""""""""
" default setting
""""""""""""""""""""""""""""""""""""""""""""""""""
let putty_path = 'null'
let font       = ''
""""""""""""""""""""""""""""""""""""""""""""""""""
" computer-specific setting
""""""""""""""""""""""""""""""""""""""""""""""""""
let hname = hostname()
if hname=='CISYYANG00'
  " LSI computer
  let putty_path = 'C:\Users\yyang\Software\putty'
  let putty_key  = putty_path.'\shaltc04.ppk'
  let ctags_path = 'C:\Users\yyang\Software\ctags58'
  let font       = 'adobe_source_code'
elseif hname==''
  " home comuter
else
  " linux workstation
  let putty_path = 'null'
  let ctags_path = '/usr/bin/ctags'
endif

""""""""""""""""""""""""""""""""""""""""""""""""""
" shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""""
"map :t :tabnew
map :W :w
map :X :x
map :Q :q
map T :tabNext<CR>
map :l :set nomodifiable
map :ul :set modifiable
map f zCzO
map F zC
map q zc
map e zo

map - %=
"map - [{
"map = ]}
map H ^
map E $
map <C-A> ^
noremap <C-A> <ESC>^
vnoremap <C-A> <ESC>^
inoremap <C-A> <ESC>^
map <C-E> $
noremap <C-E> <ESC>$
vnoremap <C-E> <ESC>$
inoremap <C-E> <ESC>$

""""""""""""""""""""""""""""""""""""""""""""""""""
" editing
""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on
if font=='adobe_source_code'
  set guifont=Source_Code_Pro:h8:cANSI
else
  set guifont=DejaVu\ LGC\ Sans\ Mono\ 10
endif
set nobackup
if has("gui_running")
  set autochdir   " auto change dir to current file 
  set mouse=a
  colorscheme desert
else
  set t_Co=256
  colorscheme desert
  "colorscheme evening
endif

""""""""""""""""""""""""""""""""""""""""""""""""""
" searching
""""""""""""""""""""""""""""""""""""""""""""""""""
set hlsearch
set incsearch
set showcmd
""""""""""""""""""""""""""""""""""""""""""""""""""
" wrap
""""""""""""""""""""""""""""""""""""""""""""""""""
set tw=0
set textwidth=0
set wrapmargin=0
set nowrap
"set wrap
"set nowrapscan
"set autoread
set whichwrap=b,s,<,>,[,]

""""""""""""""""""""
" remote files
""""""""""""""""""""
if putty_path!='null'
  let g:netrw_cygwin = 0
  let g:netrw_silent = 1
  let g:netrw_list_cmd = putty_path.'\PLINK.exe -P ##### user@host.com ls -Fa '
  let g:netrw_ssh_cmd  = putty_path.'\PLINK -T -ssh'
  let g:netrw_scp_cmd  = putty_path.'\PSCP.EXE -2 -i '.putty_key
  let g:netrw_sftp_cmd = putty_path.'\PSFTP.EXE -i '.putty_key
endif

""""""""""""""""""""
" tabs and indent
""""""""""""""""""""
set tabstop=4 et
set softtabstop=2
set shiftwidth=2
set expandtab
" set autoindent
" set smartindent
set cindent
"colorscheme  spring
"colorscheme  darkblue
"colo  colorful
set wildmenu
set backspace=2
filetype on
filetype plugin on
filetype indent on
set nocp
set fileencodings=utf-8,cp936,big5,euc-jp,euc-kr,latin1,ucs-bom
set ambiwidth=double
set modifiable
syntax on
set   showmatch
set   nu
set   nobackup
set   backupext=.bak
set   helplang=cn
set ignorecase smartcase
"behave xterm

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" folding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set fdm=syntax
"colorscheme koehler 
"colorscheme desertEx
"hi Folded term=standout ctermfg=darkcyan ctermbg=NONE guifg=Black guibg=#e3c1a5
":hi Folded guibg=black guifg=grey40 ctermfg=grey ctermbg=darkgrey
":hi Folded guibg=black guifg=red ctermfg=red ctermbg=black 
":hi FoldColumn guibg=black guifg=grey20 ctermfg=4 ctermbg=7


"""""""""""""""""""""""""""""""""""""""""""""""""
" built in completion
"""""""""""""""""""""""""""""""""""""""""""""""""
set wildmode=list:full
set wildmenu

"""""""""""""""""""""""""""""""""""""""""""""""""
" neo completion cache
"""""""""""""""""""""""""""""""""""""""""""""""""
" Use neocomplcache. 
" let g:neocomplcache_enable_at_startup = 1 
" Disable auto completion (to use C-x C-u)
" let g:neocomplcache_disable_auto_complete = 1
" Use smartcase. 
" let g:neocomplcache_enable_smart_case = 1 
"""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""
" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window.
"""""""""""""""""""""""""""""""""""""""""""""""""
" autocmd InsertEnter * let w:last_fdm=&foldmethod | setlocal foldmethod=manual
" autocmd InsertLeave * let &l:foldmethod=w:last_fdm
"""""""""""""""""""""""""""""""""""""""""""""""""
" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window. Protect against
" screwing up folding when switching between windows.
"""""""""""""""""""""""""""""""""""""""""""""""""
" autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
" autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

"""""""""""""""""""""""""""""""""""""""""""""""""
" cscope key map
"""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>      
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>      
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>      
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>      
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>      
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>      
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>     
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif
"""""""""""""""""""""""""""""""""""""""""""""""""
" grep
"""""""""""""""""""""""""""""""""""""""""""""""""
if has("grep")
    
endif

"""""""""""""""""""""""""""""""""""""""""""""""""
" ctags
if has("win32")
  set tags+=ctags_path;
  set tags=tags;
else
  let Tlist_Ctags_Cmd = ctags_path
endif
"""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""
"autocmd GUIEnter * winpos 0 0 | set lines=9999 columns=99999
"autocmd BufWritePre,FileWritePre *.v   ks|call LastModified()|'s
"let g:miniBufExplMapCTabSwitchBufs=1
"let g:miniBufExplMapWindowNavVim=1
"let g:miniBufExplMapWindowNavArrows=1
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
"let Tlist_Use_Right_Window = 1
let Tlist_Use_Bottom_Window = 1
"let g:winManagerWindowLayout='FileExplorer,TagList'
"let g:winManagerWindowLayout='FileExplorer'
"let g:winManagerWindowLayout='nerdtree|TagList'
"let g:winManagerWindowLayout='TagList'
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" matching brackets
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
":inoremap ( ()<ESC>i
":inoremap ) <c-r>=ClosePair(')')<CR>
":inoremap { {}<ESC>i
":inoremap } <c-r>=ClosePair('}')<CR>
":inoremap [ []<ESC>i
":inoremap ] <c-r>=ClosePair(']')<CR>

function ClosePair(char)
if getline('.')[col('.') - 1] == a:char
    return "\<Right>"
else
    return a:char
endif
endf
nnoremap <Down> gj
nnoremap <Up> gk

"noremap <C-W> <ESC>:qa!<CR>
"vnoremap <C-W> <ESC>:qa!<CR>
"inoremap <C-W> <ESC>:qa!<CR>

:inoremap   <F2> <ESC>:w<CR>
map         <F2> :w<CR>
"cut
vnoremap <C-X> "+x
"copy
vnoremap <C-C> "+y
"paste
"map <C-Q>          "+gP
"cmap <C-Q>          <C-R>+
"save
" original
" noremap <C-S>          :update<CR>
" vnoremap <C-S>          <C-C>:update<CR>
" inoremap <C-S>          <C-O>:update<CR>
noremap <C-S>          <ESC>:w<CR>
vnoremap <C-S>          <ESC>:w<CR>
inoremap <C-S>          <ESC>:w<CR>
"undo
noremap <C-Z> u
inoremap <C-Z> <C-O>u
" CTRL-A is Select all
"noremap <C-A> gggH<C-O>G
"inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
"cnoremap <C-A> <C-C>gggH<C-O>G
"onoremap <C-A> <C-C>gggH<C-O>G
"snoremap <C-A> <C-C>gggH<C-O>G
"xnoremap <C-A> <C-C>ggVG
"new tab
":inoremap    <F3>  <ESC>:tabnew .<CR>
"map          <F3>  :tabnew .<CR>
":inoremap    <F3>  <ESC>:TlistOpen<CR>
"map          <F3>  :TlistOpen<CR>
:inoremap    <A-,>  <ESC><C-W>h
map          <A-,>  <C-W>h
:inoremap    <A-.>  <ESC><C-W>l
map          <A-.>  <C-W>l
"com! -nargs=0 ShowNextMark       :call <sid> Vm_goto_next_sign()
"com! -nargs=0 ShowPreMark        :call <sid> Vm_goto_prev_sign()
"com! -nargs=0 ShowMarkWindow     :call <sid> Vm_toggle_sign()
"close tab
":inoremap   <F4>  <ESC>:wq<CR>
"map         <F4>  :wq<CR>
:inoremap    <F4>  <ESC>:bd<CR>
map          <F4>  :bd<CR>
:inoremap    <A-j>  <ESC>:Allpn<CR>
map          <A-j>  :Allpn<CR>
:inoremap    <A-k>  <ESC>:Allcom<CR>
map          <A-k>  :Allcom<CR>
:inoremap    <A-z>  <ESC>:Aheader<CR>
map          <A-z>  :Aheader<CR>
:inoremap    <A-c>  <ESC>:Acontent<CR>
map          <A-c>  :Acontent<CR>
:inoremap    <A-a>  <ESC>\mm<CR>
map          <A-a>  \mm<CR>
":inoremap   <F5>  <ESC>:bnext<CR>
"map         <F5>  :bnext<CR>
:inoremap   <A-q>  <ESC>\ma<CR>
map         <A-q>  \ma<CR>
"next tab
:inoremap   <A-n> <ESC>:bnext<CR>
map         <A-n> :bnext<CR>
"pre tab
":inoremap   <F5> <ESC>:tabprevious<CR>
"map         <F5> :tabprevious<CR>
"taglist
"let Tlist_File_Fold_Auto_Close=1
"set updatetime=1000
:inoremap  <A-0> <ESC>:Tlist<cr>
map        <A-0> :Tlist<CR>
map tl :Tlist<CR>
map ts :TlistSync<CR>
" ??F8 ??????
"inoremap <F8> <C-x><C-o>
":inoremap   <F8> <ESC>:WMToggle<cr> 
map       <A-9>  :WMToggle<cr> 
:inoremap <A-9> <esc>:WMToggle<cr>
"clear search highlight
:inoremap  <F9>  <ESC>:nohlsearch<cr>
map <F9>   :nohlsearch<cr>
":inoremap  <F8>  <ESC>:NERDTreeToggle<cr>
"map <F8>   :NERDTreeToggle<cr>
":inoremap  <F3>  <ESC>:WMToggle<cr>
"map <F3>   :WMToggle<cr>

"Nice statusbar
set laststatus=2
set statusline=
set statusline+=%2*%-3.3n%0*\ " buffer number
set statusline+=%f\ " file name
set statusline+=%h%1*%m%r%w%0* " flag
set statusline+=[
if v:version >= 600
set statusline+=%{strlen(&ft)?&ft:'none'}, " filetype
set statusline+=%{&encoding}, " encoding
endif
set statusline+=%{&fileformat}] " file format
if filereadable(expand("$VIM/vimfiles/plugin/vimbuddy.vim"))
set statusline+=\ %{VimBuddy()} " vim buddy
endif
set statusline+=%= " right align
"set statusline+=%2*0x%-8B\ " current char
set statusline+=0x%-8B\ " current char
set statusline+=%-14.(%l,%c%V%)\ %<%P " offset


" Line highlight ????????????
if has("gui_running")
  set cursorline
  set cursorcolumn
  hi cursorline guibg=#3333CC
  hi CursorColumn guibg=#3333CC
  "hi cursorline guibg=#ADD8E6
  "hi cursorline guibg=#EE82EE
  "hi CursorColumn guibg=#ADD8E6

  "hi Folded guibg=black guifg=red

  "set foldenable
  "set foldlevel=2
  "set foldmethod=indent
  ""set foldmethod=marker
  "nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
endif



